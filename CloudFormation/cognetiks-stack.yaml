AWSTemplateFormatVersion: '2010-09-09'
Description: >
  Complete Django App Infrastructure Stack - with VPC, Subnets, EC2 ASG, ELB, and RDS

Parameters:
  KeyPairName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access

Resources:

  # -----------------------------
  # Networking (VPC, Subnets, IGW)
  # -----------------------------
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: cognetiks-vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  VPCGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: VPCGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.1.0/24
      AvailabilityZone: !Select [0, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: cognetiks-subnet-1

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      CidrBlock: 10.0.2.0/24
      AvailabilityZone: !Select [1, !GetAZs '']
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: cognetiks-subnet-2

  Subnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref PublicRouteTable

  Subnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref PublicRouteTable

  # -----------------------------
  # IAM for EC2
  # -----------------------------
  EC2Role:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonS3FullAccess
        - arn:aws:iam::aws:policy/CloudWatchAgentServerPolicy
      Tags:
        - Key: Name
          Value: cognetiks-ec2-role

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Roles:
        - !Ref EC2Role
      InstanceProfileName: cognetiks-iac-ec2-profile

  # -----------------------------
  # Security Groups
  # -----------------------------
  ELBSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP/HTTPS from anywhere
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0

  EC2SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow 8000 from ELB and SSH
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 8000
          ToPort: 8000
          SourceSecurityGroupId: !Ref ELBSecurityGroup
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Postgres from EC2
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          SourceSecurityGroupId: !Ref EC2SecurityGroup

  # -----------------------------
  # RDS Database
  # -----------------------------
  RDSDBInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBName: cognetiksdb
      Engine: postgres
      EngineVersion: "15.7"
      MasterUsername: tenny1010
      MasterUserPassword: CoalCityAdmin2017
      AllocatedStorage: 20
      DBInstanceClass: db.t3.micro
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      PubliclyAccessible: true
      MultiAZ: false
      StorageType: gp2
      BackupRetentionPeriod: 1
      DBSubnetGroupName: !Ref RDSSubnetGroup

  RDSSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnets for RDS
      SubnetIds:
        - !Ref Subnet1
        - !Ref Subnet2

  # -----------------------------
  # Launch Template
  # -----------------------------
  EC2LaunchTemplate:
    Type: AWS::EC2::LaunchTemplate
    Properties:
      LaunchTemplateName: cognetiks-iac-launch-template
      LaunchTemplateData:
        IamInstanceProfile:
          Name: cognetiks-iac-ec2-profile
        KeyName: !Ref KeyPairName
        InstanceType: t3.micro
        ImageId: ami-090c309e8ced8ecc2
        SecurityGroupIds:
          - !Ref EC2SecurityGroup
        BlockDeviceMappings:
          - DeviceName: /dev/xvda
            Ebs:
              VolumeSize: 8
              VolumeType: gp2
        UserData: !Base64 |
          #!/bin/bash
          set -e
          apt update -y
          apt install -y python3 python3-pip git postgresql-client amazon-cloudwatch-agent
          python3 -m pip install --upgrade pip virtualenv
          cd /home/ubuntu
          git clone https://github.com/IKUKU1010/Cognetiks_DevOps_App.git app
          cd app
          python3 -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt
          echo "DB_HOST=${RDSDBInstance.Endpoint.Address}" >> .env
          echo "DB_NAME=cognetiksdb" >> .env
          echo "DB_USER=admin" >> .env
          echo "DB_PASSWORD=Admin12345!" >> .env
          systemctl enable gunicorn
          systemctl start gunicorn

  # -----------------------------
  # Auto Scaling + ELB
  # -----------------------------
  LoadBalancer:
    Type: AWS::ElasticLoadBalancing::LoadBalancer
    Properties:
      LoadBalancerName: cognetiks-iac-elb
      Listeners:
        - LoadBalancerPort: 80
          InstancePort: 8000
          Protocol: HTTP
      HealthCheck:
        Target: HTTP:8000/
        HealthyThreshold: 3
        UnhealthyThreshold: 5
        Interval: 30
        Timeout: 5
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      SecurityGroups:
        - !Ref ELBSecurityGroup

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      AutoScalingGroupName: cognetiks-iac-asg
      MinSize: '1'
      MaxSize: '3'
      DesiredCapacity: '2'
      LaunchTemplate:
        LaunchTemplateId: !Ref EC2LaunchTemplate
        Version: !GetAtt EC2LaunchTemplate.LatestVersionNumber
      LoadBalancerNames:
        - !Ref LoadBalancer
      VPCZoneIdentifier:
        - !Ref Subnet1
        - !Ref Subnet2
      Tags:
        - Key: Name
          Value: cognetiks-iac
          PropagateAtLaunch: true

Outputs:
  LoadBalancerDNS:
    Description: Public DNS of the ELB
    Value: !GetAtt LoadBalancer.DNSName

  RDSEndpoint:
    Description: RDS Endpoint
    Value: !GetAtt RDSDBInstance.Endpoint.Address

